##############################################################################################
## 					Teste modelo            			    ##
##############################################################################################


1. Os potenciais problemas são: gastar muitos recursos em iniciar cada conexão tcp por cada 
thread do cliente e é complicado ter uma conexão a ser gerida por várias threads.
Para resolver o primeiro problema é necessário fazer todos os pedidos numa conexão tcp, em vez
de criar um nova conexão tcp por cada pedido. Para o segundo, podemos criar uma conexão por cada
thread uma vez que a criação de threads é de baixo ritmo.
possivelmente sincronização entre operações e pedidos de tamanho muito variável. <-- isto só deus sabe

2. O Cap'n Proto utiliza um representação neutra em memória o que significa que não é necessário
fazer enconding/decoding à mensagem, como esta operação é utilizada para medir a performance de
protocolos de serialização de dados, Cap'n Proto demora 0 tempo, logo "INFINITY TIMES FASTER" than
Protocol Buffer. Nestes formatos depois de feita a estrutura pode-se logo escrever no disco, não
sendo necessário fazer enconding. Da mesma forma tendo a estrura não é necessário fazer decoding
podendo ler diretamente da mensagem. Por isto mesmo é vantajoso em relação ao modo clássico de
serialização pois não é necessários os passos de encoding/decoding.

3. Um actor é uma entidade leve comparativamente a threads+objetos e por causa disso pode ser 
criada em altos números com menores custos. É mais rápido de fazer context switching e é
também mais seguro pois o seu estado não é partilhado. Assim a computação é isolada e não é
necessário ao programdor se preocupar com concurrência.

4. O selective receive é quando é possível escolher qual a mensagem a tratar e quando. É importante
pois há casos em que o ator não consegue atender a todas as mensagens, por exemplo, o caso de ele
enviar uma mensagem a outro ator e estar a espera da resposta, que será necessária ao tratamento
das próximas mensagens.

5. Um MOM tem por objetivo de dar uma interface simples de sistemas distribuidos ao programador.
Os seus papeis tipicos são establecimento de conexão, reconexão e "polling", envio e receção de
mensagens, "queueing" de mensagens, balanceamento e "fair queueing", routeamento de mensagens.
Por exemplo no padráo "Request-Reply" o MOM tem de fazer os papeis referenciados acima.

6. O papel de um socket do tipo router é de marcar as mensagens de forma a saber de onde vieram
e depois reencaminhá-las para o destinatário correto. Exploram a possibilidade das mensagens serem
multi-part --- fodeu ---   ¯\_(ツ)_/¯

7. A restição de interface uniforme consiste em ter componentes pré-definidos e que seguem certas 
regras ( seguro & idenpotente ) como por exemplo métodos GET, PUT , POST e DELETE. A sua vantagem é
que não é necessário para cada serviço criar uma forma de comunicação especifica, nem ler e criar
documentação da mesma. Por exemplo para um GET, já é sabido que tem as propriedade de segurança e
idenpotencia.

---------------------------Não tá grande merda mas olha, estudasses------------------------------
